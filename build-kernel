#!/bin/bash

# Description : automated build of the linux kernel
# Author : ClÃ©ment DE LA GENIERE
# btw : This script is made to be executed inside the appropriate docker container,
# 		and as such, it assumes that the right dependencies are installed

function downloadArch() {
	url="$1"
	version="$2"

	[[ -z "$url" ]]  && return 1
	[[ -z "$version" ]]  && return 1

	echo "[Info] Downloading kernel archive @ $url"

	cd /build
	wget -q $url

	if [[ $? -ne 0 ]]; then
		err "Failed to download archive '$url'"
		err "Verify that kernel version exists '$version'"
		return 1
	fi
	return 0
}

function extractArch() {
	[[ -z "$file" ]]  && return 1
	echo "[Info] Extracting kernel archive"

	tar -xf $file

	if [[ $? -ne 0 ]]; then
		err "Failed to extract archive '$file'"
		return 1
	fi
	return 0
}

function compile() {
	conf="$1"
	target="$2"
	if [[ -z "$conf" || -z "$target" ]]; then
		err "compile() : Usage :"
		err "arg 1 = config file"
		err "arg 2 = make target"
		return 1
	fi

	echo "[Info] Start compilation of '$target'"
	make KCONFIG_CONFIG=$conf -j$(nproc) "$target"

	if [[ $? -ne 0 ]]; then
		err "Failed to compile target '$target'"
		return 1
	fi
	echo "[Info] Successfully compiled target '$target'"
	return 0
}

function main() {
	if [[ ! "$1" =~ ^[1-9]\.[1-9]?[0-9]\.[1-9]?[0-9]{0,2}$ && ! "$1" =~ ^[1-9]\.[1-9]?[0-9]$ ]]; then
		err "You must provide a valid kernel version"
		return 0
	fi

	local version="$1"
	local major=$(echo "$version" | cut -d. -f1)
	local path="linux-$version"
	local file="$path.tar.xz"
	local url="https://cdn.kernel.org/pub/linux/kernel/v$major.x/$file"
	local conf="/build/$path/.config"

	downloadArch "$url" "$version" || return 1

	extractArch "$file" || return 1

	cd /build/$path

	if [[ -f "/shared/config" ]]; then
		echo "[Info] Found Kernel config in ./shared"
		cp /shared/config $conf
	else
		echo "[Info] No Kernel config found in ./shared"
		echo "[Info] Falling back on default config"
		make defconfig
	fi

	# compiling kernel
	compile "$conf" "bzImage" || return 1

	cp "/build/$path/arch/x86/boot/bzImage" "/shared/bzImage-$version"

	# kernel modules
	compile "$conf" "modules" || return 1

	# install modules
	compile "$conf" "modules_install" || return 1

	local mods="/lib/modules/$version"
	if [[ ! -d "$mods" ]]; then
		cp -r /lib/modules/* /shared
	else
		cp -r "/lib/modules/$version" /shared
	fi
	echo "[Info] Linux kernel $version has successfully compiled !"
	return 0
}

# wrappers
function err() {
	echo "build-kernel [Error] $1" >&2
}

main "$@"
